// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CREATOR
  RESPONDENT
}

model User {
  id                  String      @id @default(uuid())
  email               String      @unique
  roles               Role[]
  password            String?
  ssoUsername         String?
  firstName           String?
  lastName            String?
  phoneNumber         String?
  gender              String?
  companyName         String?
  birthDate           DateTime?
  credit              Int?
  isVerified          Boolean     @default(false)
  isBlocked           Boolean     @default(false)
  hasCompletedProfile Boolean     @default(false)
  Admin               Admin?
  Creator             Creator?
  Respondent          Respondent?
  Payment             Payment[]
  ReportTo            Report[]    @relation("to")
  ReportFrom          Report[]    @relation("from")
}

model Admin {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Creator {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  emailNotificationActive Boolean @default(true)
  Form                    Form[]
}

model Respondent {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  pity          Int             @default(0)
  Participation Participation[]
  Winner        Winner[]
}

model Payment {
  id     String @id @default(uuid())
  itemId Int
  item   Item   @relation(fields: [itemId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Item {
  id          Int       @id @default(autoincrement())
  title       String
  price       Int
  description String
  Payment     Payment[]
}

model Report {
  toUserId   String
  toUser     User   @relation("to", fields: [toUserId], references: [id])
  fromUserId String
  fromUser   User   @relation("from", fields: [fromUserId], references: [id])

  message String

  @@id([toUserId, fromUserId])
}

model Form {
  id String @id @default(uuid())

  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [userId])

  title          String
  prize          Int
  isDraft        Boolean @default(true)
  isPublished    Boolean @default(false)
  maxParticipant Int?

  Participation Participation[]
  Winner        Winner[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  endedAt   DateTime?
  Section   Section[] // Better include Opening and Closing as section
  Answer    Answer[]
}

model Section {
  formId    String
  form      Form   @relation(fields: [formId], references: [id])
  sectionId Int    @default(autoincrement())

  name        String
  description String?
  Question    Question[]

  @@id([formId, sectionId])
}

model Participation {
  respondentId            String
  respondent              Respondent @relation(fields: [respondentId], references: [userId])
  formId                  String
  form                    Form       @relation(fields: [formId], references: [id])
  isCompleted             Boolean    @default(false)
  emailNotificationActive Boolean    @default(true)

  @@id([respondentId, formId])
}

model Winner {
  respondentId String
  respondent   Respondent @relation(fields: [respondentId], references: [userId])
  formId       String
  form         Form       @relation(fields: [formId], references: [id])

  isPaid Boolean @default(false)

  @@id([respondentId, formId])
}

enum QuestionType {
  TEXT // Applicable for SHORT_TEXT, LONG_TEXT, DATE, EMAIL, NUMBER, RATING, TIME, LINK, DROPDOWN
  CHECKBOX
  RADIO // Applicable for MULTIPLE_CHOICE, Yes/No, TRUE, LIKERT
}

model Question {
  formId    String
  sectionId Int
  Section   Section @relation(fields: [formId, sectionId], references: [formId, sectionId])

  no Int

  questionType QuestionType

  isRequired Boolean @default(false)

  question    String
  description String?

  Text     Text?
  Checkbox Checkbox?
  Radio    Radio?

  @@id([formId, sectionId, no])
}

model Text {
  formId    String
  sectionId Int
  no        Int
  question  Question @relation(fields: [formId, sectionId, no], references: [formId, sectionId, no])

  @@id([formId, sectionId, no])
}

model Checkbox {
  formId    String
  sectionId Int
  no        Int
  question  Question @relation(fields: [formId, sectionId, no], references: [formId, sectionId, no])
  choice    String[]

  @@id([formId, sectionId, no])
}

model Radio {
  formId    String
  sectionId Int
  no        Int
  question  Question @relation(fields: [formId, sectionId, no], references: [formId, sectionId, no])
  choice    String[]

  @@id([formId, sectionId, no])
}

model Answer {
  respondentId String
  formId       String
  form         Form   @relation(fields: [formId], references: [id])

  // Store the answer in JSON format, the key is the section, 
  // value is an object containing keys of questionNumber
  // and value of the answer
  answer    Json
  createdAt DateTime @default(now())

  @@id([respondentId, formId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  @@map("verification_tokens")
}
